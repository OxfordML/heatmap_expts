'''
Plot the results of the simulations with increasing numbers of data points. Show accuracy etc. 

Currently using the results generated by gen_synthetic -- can alter to use the Ushahidi and Cicada data later.

Created on 23 Nov 2015

@author: edwin
'''

import numpy as np
import matplotlib.pyplot as plt
import gen_synthetic
import logging
from gen_synthetic import Nreports

def load_mean_results(nruns, weak_proportions, filename):
    mean_results = {}
    for p_idx, p in enumerate(weak_proportions):
        for cluster_spread in gen_synthetic.cluster_spreads:
            for d in range(nruns):
                dataset_label = "p%i_d%i" % (p_idx, d)
                expt_label = gen_synthetic.expt_label_template % cluster_spread 
                logging.info("Loading results for proportion %i, Dataset %d, cluster spread %f" % (p_idx, d, cluster_spread))
                outputdir, _ = gen_synthetic.dataset_location(expt_label, dataset_label)
    
                current_results = np.load(outputdir + filename).item()
                methods = current_results.keys()
    
                if p not in mean_results:
                    mean_results[p] = {}
                    
                if cluster_spread not in mean_results[p]:
                    mean_results[p][cluster_spread] = {}                

                for m in methods:
                    if not m in mean_results[p][cluster_spread]:
                        mean_results[p][cluster_spread][m] = np.array(current_results[m])
                    else:
                        mean_results[p][cluster_spread][m] += np.array(current_results[m])
        
            for m in mean_results[p][cluster_spread]:
                mean_results[p][cluster_spread][m] = mean_results[p][cluster_spread][m] / float(nruns)
    return mean_results, methods

if __name__ == '__main__':
    # import settings from where the experiments were run    
    nruns = gen_synthetic.nruns
    weak_proportions = gen_synthetic.weak_proportions
    Nreps_initial = gen_synthetic.Nreps_initial
    Nreports = gen_synthetic.Nreports 
    Nrep_inc = gen_synthetic.Nrep_inc
    Nsteps = gen_synthetic.nsteps
    
    # get a set of x-coordinates for the number of reports at each iteration
    Nreps_iter = np.arange(Nsteps) * Nrep_inc + Nreps_initial
    
    # load results for the density estimation        
    # Root mean squared error
    rmsed, methods = load_mean_results(nruns, weak_proportions, "rmsed.npy")
     
    for p in weak_proportions:
        for cs in gen_synthetic.cluster_spreads:
            plt.figure()
            plt.title('Root Mean Square Error of Density Estimates')
            for m in methods:
                plt.plot(Nreps_iter, rmsed[p][cs][m], label='%.2f reliable, %s' % (p, m))
            plt.xlabel('Number of crowdsourced labels')
            plt.ylabel('RMSE')
            plt.ylim(0, 1.0)
            plt.legend(loc='best')
     
    # Kendall's Tau
    tau, methods = load_mean_results(nruns, weak_proportions, "tau.npy")
 
    for p in weak_proportions:
        for cs in gen_synthetic.cluster_spreads:        
            plt.figure()
            plt.title("Kendall's Tau for Density Estimates")
            for m in methods:
                plt.plot(Nreps_iter, tau[p][cs][m], label='%.2f reliable, %s' % (p, m))
            plt.xlabel('Number of crowdsourced labels')
            plt.ylabel('tau')
            plt.ylim(-1.0, 1.0)
            plt.legend(loc='best')
      
    # Mean Cross Entropy
    mced, methods = load_mean_results(nruns, weak_proportions, "mced.npy")
    
    for p in weak_proportions:
        for cs in gen_synthetic.cluster_spreads:        
            plt.figure()
            plt.title("Mean Cross Entropy of Density Estimates")
            for m in methods:
                plt.plot(Nreps_iter, mced[p][cs][m], label='%.2f reliable, %s' % (p, m))
            plt.xlabel('Number of crowdsourced labels')
            plt.ylabel('MCE')
            plt.legend(loc='best')    
    
#     # load results for predicting individual data points
#     # Brier score
#     rmse, methods = load_mean_results(nruns, weak_proportions, "rmse.npy")   
#     for p in weak_proportions:
#         for cs in gen_synthetic.cluster_spreads:        
#             plt.figure()
#             plt.title("Brier Score on Individual Data Points")
#             for m in methods:
#                 plt.plot(Nreps_iter, rmse[p][cs][m], label='%.2f reliable, %s' % (p, m))
#             plt.xlabel('Number of crowdsourced labels')
#             plt.ylabel('Brier Score')
#             plt.ylim(0, 1.0)
#             plt.legend(loc='best')    
#         
#     # AUC
#     auc, methods = load_mean_results(nruns, weak_proportions, "auc.npy")
#     for p in weak_proportions:
#         for cs in gen_synthetic.cluster_spreads:        
#             plt.figure()
#             plt.title("AUC when Predicting Individual Data Points")
#             for m in methods:
#                 plt.plot(Nreps_iter, auc[p][cs][m], label='%.2f reliable, %s' % (p, m))
#             plt.xlabel('Number of crowdsourced labels')
#             plt.ylabel('AUC')
#             plt.ylim(0, 1.0)
#             plt.legend(loc='best')    
#     
#     # Mean cross entropy
#     mce, methods = load_mean_results(nruns, weak_proportions, "mce.npy")
#     for p in weak_proportions:
#         for cs in gen_synthetic.cluster_spreads:        
#             plt.figure()
#             plt.title("Mean Cross Entropy of Individual Data Points")
#             for m in methods:
#                 plt.plot(Nreps_iter, mce[p][cs][m], label='%.2f reliable, %s' % (p, m))
#             plt.xlabel('Number of crowdsourced labels')
#             plt.ylabel('MCE')
#             plt.legend(loc='best')    
        
    # Variances within a single dataset
    #rmse_var = load_mean_results(nruns, weak_proportions, "rmse_var.npy")
    #auc_var = load_mean_results(nruns, weak_proportions, "auc_var.npy")
    #mce_var = load_mean_results(nruns, weak_proportions, "mce_var.npy")    